/*
 * This source file was generated by the Gradle 'init' task
 */
package hw5;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;
import java.util.Date;
import java.util.ArrayList;
import java.text.SimpleDateFormat;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.Scanner;

import hw5.student.*;
import com.alibaba.fastjson2.*;
import com.alibaba.fastjson2.util.DateUtils;

import org.dom4j.*;
import org.dom4j.io.SAXReader;

public class App {
    public String getGreeting() {
        return "Hello World!";
    }

    public static void main(String[] args) {
        File txt = new File("us.txt");
        File json = new File("gs.json");
        File xml = new File("ds.xml");
        Queue<UndergraduateStudent> us = new PriorityQueue<UndergraduateStudent>();
        Queue<GraduateStudent> gs = new PriorityQueue<GraduateStudent>();
        Queue<DoctoralStudent> ds = new PriorityQueue<DoctoralStudent>();
        // txt is in the .dat format
        // json is in the .json format
        // xml is in the .xml format
        if (!txt.canRead() || !json.canRead() || !xml.canRead()) {
            System.err.println("File not found or cannot be read.");
            return;
        }

        // Read the file and create the corresponding objects
        try (BufferedReader reader = new BufferedReader(new FileReader(txt))) {
            String line;
            String[] dat;
            while ((line = reader.readLine()) != null) {
                dat = line.split("_");
                if (dat.length != 6) {
                    System.err.println("Invalid data format.");
                    throw new Exception("Invalid data format.");
                }
                SimpleDateFormat sdf = new SimpleDateFormat("yyyy年MM月dd日");
                Date date = sdf.parse(dat[3]);
                UndergraduateStudent u = new UndergraduateStudent(dat[0], dat[1], dat[2].equals("女") ? true : false,
                        date.getTime(), dat[4], dat[5]);
                us.add(u);
            }
        } catch (Exception e) {
            // TODO: handle exception
            System.err.println(e.getMessage());
        }

        try (BufferedReader reader = new BufferedReader(new FileReader(json))) {
            String text = new String(), line;
            while ((line = reader.readLine()) != null) {
                text += line;
            }
            List<JSONObject> list = JSON.parseArray(text, JSONObject.class);
            for (JSONObject obj : list) {
                String studentNumber = obj.getString("studentNumber");
                String studentName = obj.getString("studentName");
                String genderString = obj.getString("gender");
                String birthdayString = obj.getString("birthday");
                String academy = obj.getString("academy");
                String supervisor = obj.getString("supervisor");
                boolean gender = genderString.equals("女") ? true : false;
                SimpleDateFormat sdf = new SimpleDateFormat("yyyy年MM月dd日");
                Date date = sdf.parse(birthdayString);
                GraduateStudent g = new GraduateStudent(studentNumber, studentName, gender, date.getTime(), academy,
                        supervisor);
                gs.add(g);
            }
        } catch (Exception e) {
            System.err.println(e.getMessage());
        }

        try {
            SAXReader saxReader = new SAXReader();
            Document document = saxReader.read(xml);
            Element rootElement = (Element) document.selectSingleNode("/doctoralStudents");
            List<Element> elements = rootElement.elements();
            for (Element element : elements) {
                String studentNumber = element.elementText("studentNumber");
                String studentName = element.elementText("studentName");
                String genderString = element.elementText("gender");
                String birthdayString = element.elementText("birthday");
                String academy = element.elementText("academy");
                String supervisor = element.elementText("supervisor");
                String researchField = element.elementText("researchField");
                boolean gender = genderString.equals("女") ? true : false;
                SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
                Date date = sdf.parse(birthdayString);
                DoctoralStudent d = new DoctoralStudent(studentNumber, studentName, gender, date.getTime(), academy,
                        supervisor, researchField);
                ds.add(d);
            }
        } catch (Exception e) {
            System.err.println(e.getMessage());
        }

        Scanner scanner = new Scanner(System.in);
        while (scanner.hasNextLine()) {
            String line = scanner.nextLine();
            line.trim();
            if (line.equals("A")) {
                for (UndergraduateStudent u : us) {
                    System.out.println(u.getStudentInfo());
                }
                for (GraduateStudent g : gs) {
                    System.out.println(g.getStudentInfo());
                }
                for (DoctoralStudent d : ds) {
                    System.out.println(d.getStudentInfo());
                }
            }
            String[] cmd = line.split(" ");
            // If begun with B, add a undergraduate student
            if (cmd[0].equals("B")) {
                try {
                    SimpleDateFormat sdf = new SimpleDateFormat("yyyy年MM月dd日");
                    Date date = sdf.parse(cmd[3]);
                    UndergraduateStudent u = new UndergraduateStudent(cmd[1], cmd[2], cmd[4].equals("女") ? true : false,
                            date.getTime(), cmd[5], cmd[6]);
                    us.add(u);
                    // Convert all the student to the dat format
                    String res = "";
                    for (UndergraduateStudent u1 : us) {
                        res += u1.getStudentInfo() + "\n";
                    }

                    // Remove the US file
                    txt.delete();
                    txt.createNewFile();
                    // Write the new US file
                    try (FileOutputStream fis = new FileOutputStream(txt)) {
                        fis.write(res.getBytes());
                    } catch (Exception e) {
                        System.err.println(e.getMessage());
                    }
                } catch (Exception e) {
                    System.err.println(e.getMessage());
                }
            }

            // If begun with C, add a graduate student
            if (cmd[0].equals("C")) {
                try {
                    SimpleDateFormat sdf = new SimpleDateFormat("yyyy年MM月dd日");
                    Date date = sdf.parse(cmd[3]);
                    GraduateStudent g = new GraduateStudent(cmd[1], cmd[2], cmd[4].equals("女") ? true : false,
                            date.getTime(), cmd[5], cmd[6]);
                    gs.add(g);

                    // Convert all the student to the json format
                    List<JSONObject> list = new ArrayList<JSONObject>();
                    for (GraduateStudent g1 : gs) {
                        JSONObject jsonObject = new JSONObject();
                        jsonObject.put("studentNumber", g1.getStudentNumber());
                        jsonObject.put("studentName", g1.getStudentName());
                        jsonObject.put("gender", g1.getGender() ? "女" : "男");
                        jsonObject.put("birthday", DateUtils
                                .format(new Date(Long.parseLong(String.valueOf(g1.getBirthday()))), "yyyy年MM月dd日"));
                        jsonObject.put("academy", g1.getAcademy());
                        jsonObject.put("supervisor", g1.getSupervisor());
                        list.add(jsonObject);
                    }

                    // Remove the GS file
                    json.delete();
                    json.createNewFile();
                    // Write the new GS file
                    try (FileOutputStream fis = new FileOutputStream(json)) {
                        fis.write(JSON.toJSONString(list).getBytes());
                    } catch (Exception e) {
                        System.err.println(e.getMessage());
                    }
                } catch (Exception e) {
                    // TODO: handle exception
                }
            }

            // If begun with D, add a doctoral student
            if (cmd[0].equals("D")) {
                try {
                    SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
                    Date date = sdf.parse(cmd[3]);
                    DoctoralStudent d = new DoctoralStudent(cmd[1], cmd[2], cmd[4].equals("女") ? true : false,
                            date.getTime(), cmd[5], cmd[6], cmd[7]);
                    ds.add(d);
                    // Convert all the student to the xml format
                    Document document = DocumentHelper.createDocument();
                    Element root = document.addElement("studentInfo");
                    for (DoctoralStudent d1 : ds) {
                        Element element = root.addElement("doctoralStudent");
                        element.addElement("studentNumber").addText(d1.getStudentNumber());
                        element.addElement("studentName").addText(d1.getStudentName());
                        element.addElement("gender").addText(d1.getGender() ? "女" : "男");
                        element.addElement("birthday").addText(DateUtils
                                .format(new Date(Long.parseLong(String.valueOf(d1.getBirthday()))), "yyyy年MM月dd日"));
                        element.addElement("academy").addText(d1.getAcademy());
                        element.addElement("supervisor").addText(d1.getSupervisor());
                        element.addElement("researchField").addText(d1.getResearchField());
                    }

                    // Remove the DS file
                    xml.delete();
                    xml.createNewFile();
                    // Write the new DS file
                    try (FileOutputStream fis = new FileOutputStream(xml)) {
                        fis.write(document.asXML().getBytes());
                    } catch (Exception e) {
                        System.err.println(e.getMessage());
                    }
                } catch (Exception e) {
                    System.err.println(e.getMessage());
                }

            }

            // If begun with E, find a student with studentNumber
            if (cmd[0].equals("E")) {
                try {
                    String num = cmd[1];
                    boolean found = false;
                    for (UndergraduateStudent u : us) {
                        if (u.getStudentNumber().equals(num)) {
                            System.out.println(u.getStudentInfo());
                            found = true;
                            break;
                        }
                    }
                    for (GraduateStudent g : gs) {
                        if (g.getStudentNumber().equals(num)) {
                            System.out.println(g.getStudentInfo());
                            found = true;
                            break;
                        }
                    }
                    for (DoctoralStudent d : ds) {
                        if (d.getStudentNumber().equals(num)) {
                            System.out.println(d.getStudentInfo());
                            found = true;
                            break;
                        }
                    }
                } catch (Exception e) {
                    System.err.println(e.getMessage());
                }
            }

            // If begun with F, delete a student with studentName
            if (cmd[0].equals("F")) {
                try {
                    String num = cmd[1];
                    boolean found = false;
                    for (UndergraduateStudent u : us) {
                        if (u.getStudentName().equals(num)) {
                            System.out.println(u.getStudentInfo());
                            found = true;
                        }
                    }
                    for (GraduateStudent g : gs) {
                        if (g.getStudentName().equals(num)) {
                            System.out.println(g.getStudentInfo());
                            found = true;
                        }
                    }
                    for (DoctoralStudent d : ds) {
                        if (d.getStudentName().equals(num)) {
                            System.out.println(d.getStudentInfo());
                            found = true;
                        }
                    }
                } catch (Exception e) {
                    System.err.println(e.getMessage());
                }
            }

            // If begun with G, print the sorted list
            if (cmd[0].equals("G")) {
                for (UndergraduateStudent u : us) {
                    System.out.println(u.getStudentInfo());
                }
                for (GraduateStudent g : gs) {
                    System.out.println(g.getStudentInfo());
                }
                for (DoctoralStudent d : ds) {
                    System.out.println(d.getStudentInfo());
                }
            }
        }
    }
}
