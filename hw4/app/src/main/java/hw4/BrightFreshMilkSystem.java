/*
 * This source file was generated by the Gradle 'init' task
 */
package hw4;

import java.util.Date;

import hw4.product.Product;
import hw4.sales.StoreSales;
import hw4.sales.Order;
import hw4.sales.SaleItem;

/**
 * The BrightFreshMilkSystem class represents a simple system for managing the
 * product catalog and store sales of a store that sells fresh milk.
 * 
 * @author Haoming Bai
 * @version 1.0
 */
public class BrightFreshMilkSystem {
    private ProductCatalog productCatalog;
    private StoreSales storeSales;
    private Order currentOrder;

    /**
     * Create a new BrightFreshMilkSystem object, with the given product catalog and
     * 
     * @param productCatalog The product catalog of this BrightFreshMilkSystem
     * @param storeSales     The store sales of this BrightFreshMilkSystem
     */
    public BrightFreshMilkSystem(ProductCatalog productCatalog, StoreSales storeSales) {
        this.productCatalog = new ProductCatalog(productCatalog);
        this.storeSales = new StoreSales(storeSales);
        this.currentOrder = new Order();
    }

    /**
     * Copy constructor, which creates a new BrightFreshMilkSystem object that is a
     * copy of the given BrightFreshMilkSystem.
     * 
     * @param brightFreshMilkSystem The BrightFreshMilkSystem to be copied.
     */
    public BrightFreshMilkSystem(BrightFreshMilkSystem brightFreshMilkSystem) {
        this.productCatalog = new ProductCatalog(brightFreshMilkSystem.productCatalog);
        this.storeSales = new StoreSales(brightFreshMilkSystem.storeSales);
        this.currentOrder = new Order(brightFreshMilkSystem.currentOrder);
    }

    /**
     * Constructor with no arguments
     */
    public BrightFreshMilkSystem() {
        this.productCatalog = new ProductCatalog();
        this.storeSales = new StoreSales();
        this.currentOrder = new Order();
    }

    // Methods
    /**
     * Display the product catalog
     */
    public void displayCatalog() {
        System.out.println("Product Catalog:");
        System.out.println(this.productCatalog.toString());
    }

    /**
     * Display the current order
     */
    public void displayOrder() {
        System.out.println("Orders:");
        System.out.println(this.currentOrder.toString());
    }

    /**
     * alias for displayCatalog
     */
    public void displayProduct() {
        this.displayCatalog();
    }

    /**
     * Add the given product to the product catalog
     * 
     * @param product The product to be added
     */
    public void addProduct(Product product) {
        this.productCatalog.addProduct(product);
    }

    /**
     * Remove the given product from the product catalog
     * 
     * @param product The product to be removed
     */
    public void removeProduct(Product product) {
        this.productCatalog.removeProduct(product);
    }

    /**
     * Add the given order to the store sales
     * 
     * @param order The order to be added
     */
    public void addOrder(Order order) {
        this.storeSales.addOrder(order);
    }

    /**
     * Display the store sales of this BrightFreshMilkSystem
     */
    public void displaySales() {
        System.out.println("Store Sales:");
        System.out.println(this.storeSales.toString());
    }

    /**
     * The main function of the system, serve as a simple program for testing
     * 
     * @param args The arguments of the program, not used
     */
    public static void main(String[] args) {
        BrightFreshMilkSystem system = new BrightFreshMilkSystem();
        Product product1 = new Product("Milk", "MILK", 2.99, new Date(), "7 days");
        Product product2 = new Product("Jelly", "JELLY", 2.99, new Date(), "7 days");
        system.addProduct(product1);
        system.addProduct(product2);

        system.displayProduct();

        Order order = new Order();
        SaleItem saleItem1 = new SaleItem(2, product1);
        SaleItem saleItem2 = new SaleItem(3, product2);
        order.addSaleItem(saleItem1);
        order.addSaleItem(saleItem2);
        system.addOrder(order);

        system.displaySales();

    }
}
