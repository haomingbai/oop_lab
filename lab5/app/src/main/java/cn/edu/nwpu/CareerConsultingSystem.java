/*
 * This source file was generated by the Gradle 'init' task
 */
package cn.edu.nwpu;

import java.util.List;

import com.alibaba.fastjson2.JSON;
import com.alibaba.fastjson2.JSONObject;

import java.io.BufferedReader;
import java.io.File;
import java.util.ArrayList;
import java.io.FileReader;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;

public class CareerConsultingSystem {
    private static CareerConsultingSystem instance = null;
    private Formatter formatter;

    // Member variables
    private List<Consultant> consultants;
    private List<Student> students;
    private List<ConsultingRoom> consultingRooms;
    private List<ConsultRecord> consultRecords;

    // Constructor
    private CareerConsultingSystem() {
        consultRecords = new ArrayList<>();
        students = new ArrayList<>();
        consultants = new ArrayList<>();
        consultingRooms = new ArrayList<>();
    }

    // Add a student to the system
    /**
     * Adds a student to the list of students.
     *
     * @param student the student to be added
     */
    public void addStudent(Student student) {
        students.add(student);
    }

    // Add a consultant to the system
    /**
     * Adds a consultant to the list of consultants.
     *
     * @param consultant the Consultant object to be added
     */
    public void addConsultant(Consultant consultant) {
        consultants.add(consultant);
    }

    // Add a consulting room to the system
    /**
     * Adds a consulting room to the list of consulting rooms.
     *
     * @param consultingRoom the consulting room to be added
     */
    public void addConsultingRoom(ConsultingRoom consultingRoom) {
        consultingRooms.add(consultingRoom);
    }

    // Add a consult record to the system
    /**
     * Adds a new consult record to the list of consult records.
     *
     * @param consultRecord the consult record to be added
     */
    public void addConsultRecord(ConsultRecord consultRecord) {
        consultRecords.add(consultRecord);
    }

    // Get the instance of the CareerConsultingSystem
    /**
     * Returns the singleton instance of the CareerConsultingSystem.
     *
     * @return the singleton instance of the CareerConsultingSystem
     */
    public static synchronized CareerConsultingSystem getInstance() {
        if (instance == null) {
            instance = new CareerConsultingSystem();
        }
        return instance;
    }

    public static void main(String[] args) {
        CareerConsultingSystem system = CareerConsultingSystem.getInstance();

        try (BufferedReader reader = new BufferedReader(new FileReader("info.dat"))) {
            // Read the file by line
            String line;
            while ((line = reader.readLine()) != null) {
                JSONObject obj = JSONObject.parseObject(line);
                String phone = obj.getString("phone");
                if (phone != null) {
                    // A consultant
                    String id = obj.getString("id");
                    String name = obj.getString("name");
                    String intro = obj.getString("intro");

                    // Check if the consultant is a college consultant
                    String school = obj.getString("school");
                    if (school != null) {
                        // College consultant
                        CollegeConsultant consultant = new CollegeConsultant(id, name, phone, intro, school);
                        system.addConsultant(consultant);
                    } else {
                        // Enterprise consultant
                        String company = obj.getString("company");
                        EnterpriseConsultant consultant = new EnterpriseConsultant(id, name, phone, intro, company);
                        system.addConsultant(consultant);
                    }
                } else {
                    // A consulting room
                    String campus = obj.getString("campus");
                    String building = obj.getString("building");
                    String roomNum = obj.getString("roomNum");
                    int id = obj.getIntValue("id");
                    ConsultingRoom consultingRoom = new ConsultingRoom(id, campus, building, roomNum);
                    system.addConsultingRoom(consultingRoom);
                }
            }
        } catch (Exception e) {
            System.err.println(e.getMessage());
        }

        // Print options
        System.out.println("a. Display all consultants");
        System.out.println("b. Display all consulting rooms");
        System.out.println("c. Add a new student");
        System.out.println("d. Add a new consult record");
        System.out.println("e. Find a consult record by its ID");
        System.out.println("f. output all consult records to a file");

        // Read user input
        var scanner = new java.util.Scanner(System.in);
        String option = scanner.nextLine();

        while (option != null) {
            switch (option) {
                case "a":
                    // Display all consultants
                    for (Consultant consultant : system.consultants) {
                        System.out.println(JSON.toJSONString(consultant));
                    }
                    break;
                case "b":
                    // Display all consulting rooms
                    for (ConsultingRoom consultingRoom : system.consultingRooms) {
                        System.out.println(JSON.toJSONString(consultingRoom));
                    }
                    break;
                case "c":
                    // Add a new student

                    System.out.println("Enter the student's name:");
                    String name = scanner.nextLine();
                    System.out.println("Enter the student's ID:");
                    String studentId = scanner.nextLine();
                    System.out.println("Enter the gender");
                    ;
                    String gender = scanner.nextLine();
                    System.out.println("Enter the student's phone number:");
                    String phone = scanner.nextLine();
                    System.out.println("Enter the student's department:");
                    String department = scanner.nextLine();
                    SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
                    System.out.println("Enter the student's birthday (yyyy-MM-dd):");
                    Date birthday;
                    try {
                        birthday = dateFormat.parse(scanner.nextLine());
                    } catch (Exception e) {
                        System.out.println("Invalid date format.");
                        break;
                    }
                    Student student = new Student(studentId, name, gender.equals("å¥³"), department, phone, birthday);
                    system.addStudent(student);
                    break;
                case "d":
                    // Add a new consult record
                    System.out.println("Enter the student's ID:");
                    String stuid = scanner.nextLine();
                    Student student2 = null;
                    for (Student s : system.students) {
                        if (s.getStudentId().equals(stuid)) {
                            student2 = s;
                            break;
                        }
                    }
                    if (student2 == null) {
                        System.out.println("Student not found.");
                        break;
                    }

                    System.out.println("Enter the consultant's ID:");
                    String consultantId = scanner.nextLine();
                    Consultant consultant = null;
                    for (Consultant c : system.consultants) {
                        if (c.getId().equals(consultantId)) {
                            consultant = c;
                            break;
                        }
                    }
                    if (consultant == null) {
                        System.out.println("Consultant not found.");
                        break;
                    }

                    System.out.println("Enter the consulting room's ID:");
                    int consultingRoomId = Integer.parseInt(scanner.nextLine());
                    ConsultingRoom consultingRoom = null;
                    for (ConsultingRoom cr : system.consultingRooms) {
                        if (cr.getId() == consultingRoomId) {
                            consultingRoom = cr;
                            break;
                        }
                    }
                    if (consultingRoom == null) {
                        System.out.println("Consulting room not found.");
                        break;
                    }

                    System.out.println("Enter the date of the consultation (yyyy-MM-dd hh:mm):");
                    Date date;
                    DateFormat newDateFormat = new SimpleDateFormat("yyyy-MM-dd hh:mm");
                    try {
                        date = newDateFormat.parse(scanner.nextLine());
                    } catch (Exception e) {
                        System.out.println("Invalid date format.");
                        break;
                    }
                    ConsultRecord consultRecord = new ConsultRecord(date, student2, consultingRoom, consultant);
                    system.addConsultRecord(consultRecord);
                    break;

                case "e":
                    // Find a consult record by its ID
                    System.out.println("Enter the ID of the consult record:");
                    int id = Integer.parseInt(scanner.nextLine());
                    ConsultRecord record = null;
                    for (ConsultRecord r : system.consultRecords) {
                        if (r.getId() == id) {
                            record = r;
                            break;
                        }
                    }
                    if (record == null) {
                        System.out.println("Consult record not found.");
                    } else {
                        System.out.println(JSON.toJSONString(record));
                    }
                    break;
                case "f":
                    // Output all consult records to a file
                    try {
                        File file = new File("consult_records.dat");
                        if (!file.exists()) {
                            file.createNewFile();
                        }
                        try (java.io.FileWriter writer = new java.io.FileWriter(file)) {
                            for (ConsultRecord r : system.consultRecords) {
                                writer.write(JSON.toJSONString(r) + "\n");
                            }
                        }
                    } catch (Exception e) {
                        System.err.println(e.getMessage());
                    }
                    break;
            }
        }

    }
}
